// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ArtistRevenueClaimed extends ethereum.Event {
  get params(): ArtistRevenueClaimed__Params {
    return new ArtistRevenueClaimed__Params(this);
  }
}

export class ArtistRevenueClaimed__Params {
  _event: ArtistRevenueClaimed;

  constructor(event: ArtistRevenueClaimed) {
    this._event = event;
  }

  get claimedRevenue(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ArtworkCreated extends ethereum.Event {
  get params(): ArtworkCreated__Params {
    return new ArtworkCreated__Params(this);
  }
}

export class ArtworkCreated__Params {
  _event: ArtworkCreated;

  constructor(event: ArtworkCreated) {
    this._event = event;
  }

  get artworkTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get traitTokenIds(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get hash(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get creator(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class ArtworkDecomposed extends ethereum.Event {
  get params(): ArtworkDecomposed__Params {
    return new ArtworkDecomposed__Params(this);
  }
}

export class ArtworkDecomposed__Params {
  _event: ArtworkDecomposed;

  constructor(event: ArtworkDecomposed) {
    this._event = event;
  }

  get artworkTokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get caller(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class AuctionScheduled extends ethereum.Event {
  get params(): AuctionScheduled__Params {
    return new AuctionScheduled__Params(this);
  }
}

export class AuctionScheduled__Params {
  _event: AuctionScheduled;

  constructor(event: AuctionScheduled) {
    this._event = event;
  }

  get auctionStartTime(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get auctionEndTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get auctionStartPrice(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get auctionEndPrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PlatformRevenueClaimed extends ethereum.Event {
  get params(): PlatformRevenueClaimed__Params {
    return new PlatformRevenueClaimed__Params(this);
  }
}

export class PlatformRevenueClaimed__Params {
  _event: PlatformRevenueClaimed;

  constructor(event: PlatformRevenueClaimed) {
    this._event = event;
  }

  get claimedRevenue(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ProjectCreated extends ethereum.Event {
  get params(): ProjectCreated__Params {
    return new ProjectCreated__Params(this);
  }
}

export class ProjectCreated__Params {
  _event: ProjectCreated;

  constructor(event: ProjectCreated) {
    this._event = event;
  }

  get baseURI(): string {
    return this._event.parameters[0].value.toString();
  }

  get artistAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get maxSupply(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get metadata(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class TraitsBought extends ethereum.Event {
  get params(): TraitsBought__Params {
    return new TraitsBought__Params(this);
  }
}

export class TraitsBought__Params {
  _event: TraitsBought;

  constructor(event: TraitsBought) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get traitTokenIds(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get traitQuantities(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Studio__getArtworkTraitsResult {
  value0: Array<BigInt>;
  value1: Array<string>;
  value2: Array<string>;
  value3: Array<string>;
  value4: Array<string>;

  constructor(
    value0: Array<BigInt>,
    value1: Array<string>,
    value2: Array<string>,
    value3: Array<string>,
    value4: Array<string>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromStringArray(this.value1));
    map.set("value2", ethereum.Value.fromStringArray(this.value2));
    map.set("value3", ethereum.Value.fromStringArray(this.value3));
    map.set("value4", ethereum.Value.fromStringArray(this.value4));
    return map;
  }

  getTraitTokenIds(): Array<BigInt> {
    return this.value0;
  }

  getTraitNames(): Array<string> {
    return this.value1;
  }

  getTraitValues(): Array<string> {
    return this.value2;
  }

  getTraitTypeNames(): Array<string> {
    return this.value3;
  }

  getTraitTypeValues(): Array<string> {
    return this.value4;
  }
}

export class Studio__getTraitsResult {
  value0: Array<BigInt>;
  value1: Array<string>;
  value2: Array<string>;
  value3: Array<BigInt>;
  value4: Array<string>;
  value5: Array<string>;

  constructor(
    value0: Array<BigInt>,
    value1: Array<string>,
    value2: Array<string>,
    value3: Array<BigInt>,
    value4: Array<string>,
    value5: Array<string>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromStringArray(this.value1));
    map.set("value2", ethereum.Value.fromStringArray(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigIntArray(this.value3));
    map.set("value4", ethereum.Value.fromStringArray(this.value4));
    map.set("value5", ethereum.Value.fromStringArray(this.value5));
    return map;
  }

  get_traitTokenIds(): Array<BigInt> {
    return this.value0;
  }

  get_traitNames(): Array<string> {
    return this.value1;
  }

  get_traitValues(): Array<string> {
    return this.value2;
  }

  get_traitTypeIndexes(): Array<BigInt> {
    return this.value3;
  }

  get_traitTypeNames(): Array<string> {
    return this.value4;
  }

  get_traitTypeValues(): Array<string> {
    return this.value5;
  }
}

export class Studio extends ethereum.SmartContract {
  static bind(address: Address): Studio {
    return new Studio("Studio", address);
  }

  FEE_DENOMINATOR(): BigInt {
    let result = super.call(
      "FEE_DENOMINATOR",
      "FEE_DENOMINATOR():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_FEE_DENOMINATOR(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "FEE_DENOMINATOR",
      "FEE_DENOMINATOR():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  artistAddress(): Address {
    let result = super.call("artistAddress", "artistAddress():(address)", []);

    return result[0].toAddress();
  }

  try_artistAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "artistAddress",
      "artistAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  artistClaimableRevenues(): BigInt {
    let result = super.call(
      "artistClaimableRevenues",
      "artistClaimableRevenues():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_artistClaimableRevenues(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "artistClaimableRevenues",
      "artistClaimableRevenues():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  artworkData(param0: BigInt): Bytes {
    let result = super.call("artworkData", "artworkData(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBytes();
  }

  try_artworkData(param0: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "artworkData",
      "artworkData(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  auctionEndPrice(): BigInt {
    let result = super.call(
      "auctionEndPrice",
      "auctionEndPrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_auctionEndPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "auctionEndPrice",
      "auctionEndPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  auctionEndTime(): BigInt {
    let result = super.call("auctionEndTime", "auctionEndTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_auctionEndTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "auctionEndTime",
      "auctionEndTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  auctionPlatformFeeNumerator(): BigInt {
    let result = super.call(
      "auctionPlatformFeeNumerator",
      "auctionPlatformFeeNumerator():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_auctionPlatformFeeNumerator(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "auctionPlatformFeeNumerator",
      "auctionPlatformFeeNumerator():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  auctionStartPrice(): BigInt {
    let result = super.call(
      "auctionStartPrice",
      "auctionStartPrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_auctionStartPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "auctionStartPrice",
      "auctionStartPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  auctionStartTime(): BigInt {
    let result = super.call(
      "auctionStartTime",
      "auctionStartTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_auctionStartTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "auctionStartTime",
      "auctionStartTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseURI(): string {
    let result = super.call("baseURI", "baseURI():(string)", []);

    return result[0].toString();
  }

  try_baseURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseURI", "baseURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  createArtwork(_traitTokenIds: Array<BigInt>): BigInt {
    let result = super.call(
      "createArtwork",
      "createArtwork(uint256[]):(uint256)",
      [ethereum.Value.fromUnsignedBigIntArray(_traitTokenIds)]
    );

    return result[0].toBigInt();
  }

  try_createArtwork(
    _traitTokenIds: Array<BigInt>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createArtwork",
      "createArtwork(uint256[]):(uint256)",
      [ethereum.Value.fromUnsignedBigIntArray(_traitTokenIds)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getArtworkHash(_artworkId: BigInt): Bytes {
    let result = super.call(
      "getArtworkHash",
      "getArtworkHash(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(_artworkId)]
    );

    return result[0].toBytes();
  }

  try_getArtworkHash(_artworkId: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getArtworkHash",
      "getArtworkHash(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(_artworkId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getArtworkTraits(_artworkTokenId: BigInt): Studio__getArtworkTraitsResult {
    let result = super.call(
      "getArtworkTraits",
      "getArtworkTraits(uint256):(uint256[],string[],string[],string[],string[])",
      [ethereum.Value.fromUnsignedBigInt(_artworkTokenId)]
    );

    return new Studio__getArtworkTraitsResult(
      result[0].toBigIntArray(),
      result[1].toStringArray(),
      result[2].toStringArray(),
      result[3].toStringArray(),
      result[4].toStringArray()
    );
  }

  try_getArtworkTraits(
    _artworkTokenId: BigInt
  ): ethereum.CallResult<Studio__getArtworkTraitsResult> {
    let result = super.tryCall(
      "getArtworkTraits",
      "getArtworkTraits(uint256):(uint256[],string[],string[],string[],string[])",
      [ethereum.Value.fromUnsignedBigInt(_artworkTokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Studio__getArtworkTraitsResult(
        value[0].toBigIntArray(),
        value[1].toStringArray(),
        value[2].toStringArray(),
        value[3].toStringArray(),
        value[4].toStringArray()
      )
    );
  }

  getArtworkURI(_artworkTokenId: BigInt): string {
    let result = super.call(
      "getArtworkURI",
      "getArtworkURI(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(_artworkTokenId)]
    );

    return result[0].toString();
  }

  try_getArtworkURI(_artworkTokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getArtworkURI",
      "getArtworkURI(uint256):(string)",
      [ethereum.Value.fromUnsignedBigInt(_artworkTokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getIsAdmin(_admin: Address): boolean {
    let result = super.call("getIsAdmin", "getIsAdmin(address):(bool)", [
      ethereum.Value.fromAddress(_admin)
    ]);

    return result[0].toBoolean();
  }

  try_getIsAdmin(_admin: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("getIsAdmin", "getIsAdmin(address):(bool)", [
      ethereum.Value.fromAddress(_admin)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getProjectArtist(): Address {
    let result = super.call(
      "getProjectArtist",
      "getProjectArtist():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getProjectArtist(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getProjectArtist",
      "getProjectArtist():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getProjectIsLocked(): boolean {
    let result = super.call(
      "getProjectIsLocked",
      "getProjectIsLocked():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_getProjectIsLocked(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getProjectIsLocked",
      "getProjectIsLocked():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getProjectMetadata(): string {
    let result = super.call(
      "getProjectMetadata",
      "getProjectMetadata():(string)",
      []
    );

    return result[0].toString();
  }

  try_getProjectMetadata(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "getProjectMetadata",
      "getProjectMetadata():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getProjectScriptCount(): BigInt {
    let result = super.call(
      "getProjectScriptCount",
      "getProjectScriptCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getProjectScriptCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getProjectScriptCount",
      "getProjectScriptCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getProjectScripts(): Array<string> {
    let result = super.call(
      "getProjectScripts",
      "getProjectScripts():(string[])",
      []
    );

    return result[0].toStringArray();
  }

  try_getProjectScripts(): ethereum.CallResult<Array<string>> {
    let result = super.tryCall(
      "getProjectScripts",
      "getProjectScripts():(string[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toStringArray());
  }

  getTraitAuctionPrice(): BigInt {
    let result = super.call(
      "getTraitAuctionPrice",
      "getTraitAuctionPrice():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getTraitAuctionPrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTraitAuctionPrice",
      "getTraitAuctionPrice():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTraits(): Studio__getTraitsResult {
    let result = super.call(
      "getTraits",
      "getTraits():(uint256[],string[],string[],uint256[],string[],string[])",
      []
    );

    return new Studio__getTraitsResult(
      result[0].toBigIntArray(),
      result[1].toStringArray(),
      result[2].toStringArray(),
      result[3].toBigIntArray(),
      result[4].toStringArray(),
      result[5].toStringArray()
    );
  }

  try_getTraits(): ethereum.CallResult<Studio__getTraitsResult> {
    let result = super.tryCall(
      "getTraits",
      "getTraits():(uint256[],string[],string[],uint256[],string[],string[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Studio__getTraitsResult(
        value[0].toBigIntArray(),
        value[1].toStringArray(),
        value[2].toStringArray(),
        value[3].toBigIntArray(),
        value[4].toStringArray(),
        value[5].toStringArray()
      )
    );
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  locked(): boolean {
    let result = super.call("locked", "locked():(bool)", []);

    return result[0].toBoolean();
  }

  try_locked(): ethereum.CallResult<boolean> {
    let result = super.tryCall("locked", "locked():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  metadata(): string {
    let result = super.call("metadata", "metadata():(string)", []);

    return result[0].toString();
  }

  try_metadata(): ethereum.CallResult<string> {
    let result = super.tryCall("metadata", "metadata():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155BatchReceived(
    param0: Address,
    param1: Address,
    param2: Array<BigInt>,
    param3: Array<BigInt>,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155BatchReceived",
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigIntArray(param2),
        ethereum.Value.fromUnsignedBigIntArray(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): Bytes {
    let result = super.call(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC1155Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: BigInt,
    param4: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC1155Received",
      "onERC1155Received(address,address,uint256,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromUnsignedBigInt(param3),
        ethereum.Value.fromBytes(param4)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  platformClaimableRevenues(): BigInt {
    let result = super.call(
      "platformClaimableRevenues",
      "platformClaimableRevenues():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_platformClaimableRevenues(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "platformClaimableRevenues",
      "platformClaimableRevenues():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  traits(): Address {
    let result = super.call("traits", "traits():(address)", []);

    return result[0].toAddress();
  }

  try_traits(): ethereum.CallResult<Address> {
    let result = super.tryCall("traits", "traits():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  userNonces(param0: Address): BigInt {
    let result = super.call("userNonces", "userNonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_userNonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("userNonces", "userNonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class AddAdminsCall extends ethereum.Call {
  get inputs(): AddAdminsCall__Inputs {
    return new AddAdminsCall__Inputs(this);
  }

  get outputs(): AddAdminsCall__Outputs {
    return new AddAdminsCall__Outputs(this);
  }
}

export class AddAdminsCall__Inputs {
  _call: AddAdminsCall;

  constructor(call: AddAdminsCall) {
    this._call = call;
  }

  get _admins(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class AddAdminsCall__Outputs {
  _call: AddAdminsCall;

  constructor(call: AddAdminsCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BuyTraitsCall extends ethereum.Call {
  get inputs(): BuyTraitsCall__Inputs {
    return new BuyTraitsCall__Inputs(this);
  }

  get outputs(): BuyTraitsCall__Outputs {
    return new BuyTraitsCall__Outputs(this);
  }
}

export class BuyTraitsCall__Inputs {
  _call: BuyTraitsCall;

  constructor(call: BuyTraitsCall) {
    this._call = call;
  }

  get _traitTokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _traitAmounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class BuyTraitsCall__Outputs {
  _call: BuyTraitsCall;

  constructor(call: BuyTraitsCall) {
    this._call = call;
  }
}

export class BuyTraitsCreateArtworkCall extends ethereum.Call {
  get inputs(): BuyTraitsCreateArtworkCall__Inputs {
    return new BuyTraitsCreateArtworkCall__Inputs(this);
  }

  get outputs(): BuyTraitsCreateArtworkCall__Outputs {
    return new BuyTraitsCreateArtworkCall__Outputs(this);
  }
}

export class BuyTraitsCreateArtworkCall__Inputs {
  _call: BuyTraitsCreateArtworkCall;

  constructor(call: BuyTraitsCreateArtworkCall) {
    this._call = call;
  }

  get _traitTokenIdsToBuy(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }

  get _traitQuantitiesToBuy(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _traitTokenIdsToCreateArtwork(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class BuyTraitsCreateArtworkCall__Outputs {
  _call: BuyTraitsCreateArtworkCall;

  constructor(call: BuyTraitsCreateArtworkCall) {
    this._call = call;
  }
}

export class ClaimArtistRevenueCall extends ethereum.Call {
  get inputs(): ClaimArtistRevenueCall__Inputs {
    return new ClaimArtistRevenueCall__Inputs(this);
  }

  get outputs(): ClaimArtistRevenueCall__Outputs {
    return new ClaimArtistRevenueCall__Outputs(this);
  }
}

export class ClaimArtistRevenueCall__Inputs {
  _call: ClaimArtistRevenueCall;

  constructor(call: ClaimArtistRevenueCall) {
    this._call = call;
  }
}

export class ClaimArtistRevenueCall__Outputs {
  _call: ClaimArtistRevenueCall;

  constructor(call: ClaimArtistRevenueCall) {
    this._call = call;
  }
}

export class ClaimPlatformRevenueCall extends ethereum.Call {
  get inputs(): ClaimPlatformRevenueCall__Inputs {
    return new ClaimPlatformRevenueCall__Inputs(this);
  }

  get outputs(): ClaimPlatformRevenueCall__Outputs {
    return new ClaimPlatformRevenueCall__Outputs(this);
  }
}

export class ClaimPlatformRevenueCall__Inputs {
  _call: ClaimPlatformRevenueCall;

  constructor(call: ClaimPlatformRevenueCall) {
    this._call = call;
  }
}

export class ClaimPlatformRevenueCall__Outputs {
  _call: ClaimPlatformRevenueCall;

  constructor(call: ClaimPlatformRevenueCall) {
    this._call = call;
  }
}

export class CreateArtworkCall extends ethereum.Call {
  get inputs(): CreateArtworkCall__Inputs {
    return new CreateArtworkCall__Inputs(this);
  }

  get outputs(): CreateArtworkCall__Outputs {
    return new CreateArtworkCall__Outputs(this);
  }
}

export class CreateArtworkCall__Inputs {
  _call: CreateArtworkCall;

  constructor(call: CreateArtworkCall) {
    this._call = call;
  }

  get _traitTokenIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class CreateArtworkCall__Outputs {
  _call: CreateArtworkCall;

  constructor(call: CreateArtworkCall) {
    this._call = call;
  }

  get _artworkTokenId(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateProjectCall extends ethereum.Call {
  get inputs(): CreateProjectCall__Inputs {
    return new CreateProjectCall__Inputs(this);
  }

  get outputs(): CreateProjectCall__Outputs {
    return new CreateProjectCall__Outputs(this);
  }
}

export class CreateProjectCall__Inputs {
  _call: CreateProjectCall;

  constructor(call: CreateProjectCall) {
    this._call = call;
  }

  get _baseURI(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _artistAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _maxSupply(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _metadata(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class CreateProjectCall__Outputs {
  _call: CreateProjectCall;

  constructor(call: CreateProjectCall) {
    this._call = call;
  }
}

export class CreateTraitsCall extends ethereum.Call {
  get inputs(): CreateTraitsCall__Inputs {
    return new CreateTraitsCall__Inputs(this);
  }

  get outputs(): CreateTraitsCall__Outputs {
    return new CreateTraitsCall__Outputs(this);
  }
}

export class CreateTraitsCall__Inputs {
  _call: CreateTraitsCall;

  constructor(call: CreateTraitsCall) {
    this._call = call;
  }

  get _traitTypeNames(): Array<string> {
    return this._call.inputValues[0].value.toStringArray();
  }

  get _traitTypeValues(): Array<string> {
    return this._call.inputValues[1].value.toStringArray();
  }

  get _traitNames(): Array<string> {
    return this._call.inputValues[2].value.toStringArray();
  }

  get _traitValues(): Array<string> {
    return this._call.inputValues[3].value.toStringArray();
  }

  get _traitTypeIndexes(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }

  get _traitMaxSupplys(): Array<BigInt> {
    return this._call.inputValues[5].value.toBigIntArray();
  }
}

export class CreateTraitsCall__Outputs {
  _call: CreateTraitsCall;

  constructor(call: CreateTraitsCall) {
    this._call = call;
  }
}

export class DecomposeArtworkCall extends ethereum.Call {
  get inputs(): DecomposeArtworkCall__Inputs {
    return new DecomposeArtworkCall__Inputs(this);
  }

  get outputs(): DecomposeArtworkCall__Outputs {
    return new DecomposeArtworkCall__Outputs(this);
  }
}

export class DecomposeArtworkCall__Inputs {
  _call: DecomposeArtworkCall;

  constructor(call: DecomposeArtworkCall) {
    this._call = call;
  }

  get _artworkTokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DecomposeArtworkCall__Outputs {
  _call: DecomposeArtworkCall;

  constructor(call: DecomposeArtworkCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _traits(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _owner(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _admins(): Array<Address> {
    return this._call.inputValues[4].value.toAddressArray();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class LockProjectCall extends ethereum.Call {
  get inputs(): LockProjectCall__Inputs {
    return new LockProjectCall__Inputs(this);
  }

  get outputs(): LockProjectCall__Outputs {
    return new LockProjectCall__Outputs(this);
  }
}

export class LockProjectCall__Inputs {
  _call: LockProjectCall;

  constructor(call: LockProjectCall) {
    this._call = call;
  }
}

export class LockProjectCall__Outputs {
  _call: LockProjectCall;

  constructor(call: LockProjectCall) {
    this._call = call;
  }
}

export class OnERC1155BatchReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155BatchReceivedCall__Inputs {
    return new OnERC1155BatchReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155BatchReceivedCall__Outputs {
    return new OnERC1155BatchReceivedCall__Outputs(this);
  }
}

export class OnERC1155BatchReceivedCall__Inputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get value3(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155BatchReceivedCall__Outputs {
  _call: OnERC1155BatchReceivedCall;

  constructor(call: OnERC1155BatchReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class OnERC1155ReceivedCall extends ethereum.Call {
  get inputs(): OnERC1155ReceivedCall__Inputs {
    return new OnERC1155ReceivedCall__Inputs(this);
  }

  get outputs(): OnERC1155ReceivedCall__Outputs {
    return new OnERC1155ReceivedCall__Outputs(this);
  }
}

export class OnERC1155ReceivedCall__Inputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value1(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value2(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get value3(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get value4(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class OnERC1155ReceivedCall__Outputs {
  _call: OnERC1155ReceivedCall;

  constructor(call: OnERC1155ReceivedCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class RemoveAdminsCall extends ethereum.Call {
  get inputs(): RemoveAdminsCall__Inputs {
    return new RemoveAdminsCall__Inputs(this);
  }

  get outputs(): RemoveAdminsCall__Outputs {
    return new RemoveAdminsCall__Outputs(this);
  }
}

export class RemoveAdminsCall__Inputs {
  _call: RemoveAdminsCall;

  constructor(call: RemoveAdminsCall) {
    this._call = call;
  }

  get _admins(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class RemoveAdminsCall__Outputs {
  _call: RemoveAdminsCall;

  constructor(call: RemoveAdminsCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class ScheduleAuctionCall extends ethereum.Call {
  get inputs(): ScheduleAuctionCall__Inputs {
    return new ScheduleAuctionCall__Inputs(this);
  }

  get outputs(): ScheduleAuctionCall__Outputs {
    return new ScheduleAuctionCall__Outputs(this);
  }
}

export class ScheduleAuctionCall__Inputs {
  _call: ScheduleAuctionCall;

  constructor(call: ScheduleAuctionCall) {
    this._call = call;
  }

  get _auctionStartTime(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _auctionEndTime(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _auctionStartPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _auctionEndPrice(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ScheduleAuctionCall__Outputs {
  _call: ScheduleAuctionCall;

  constructor(call: ScheduleAuctionCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateBaseURICall extends ethereum.Call {
  get inputs(): UpdateBaseURICall__Inputs {
    return new UpdateBaseURICall__Inputs(this);
  }

  get outputs(): UpdateBaseURICall__Outputs {
    return new UpdateBaseURICall__Outputs(this);
  }
}

export class UpdateBaseURICall__Inputs {
  _call: UpdateBaseURICall;

  constructor(call: UpdateBaseURICall) {
    this._call = call;
  }

  get _baseURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class UpdateBaseURICall__Outputs {
  _call: UpdateBaseURICall;

  constructor(call: UpdateBaseURICall) {
    this._call = call;
  }
}

export class UpdateMetadataCall extends ethereum.Call {
  get inputs(): UpdateMetadataCall__Inputs {
    return new UpdateMetadataCall__Inputs(this);
  }

  get outputs(): UpdateMetadataCall__Outputs {
    return new UpdateMetadataCall__Outputs(this);
  }
}

export class UpdateMetadataCall__Inputs {
  _call: UpdateMetadataCall;

  constructor(call: UpdateMetadataCall) {
    this._call = call;
  }

  get _metadata(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class UpdateMetadataCall__Outputs {
  _call: UpdateMetadataCall;

  constructor(call: UpdateMetadataCall) {
    this._call = call;
  }
}

export class UpdateScriptCall extends ethereum.Call {
  get inputs(): UpdateScriptCall__Inputs {
    return new UpdateScriptCall__Inputs(this);
  }

  get outputs(): UpdateScriptCall__Outputs {
    return new UpdateScriptCall__Outputs(this);
  }
}

export class UpdateScriptCall__Inputs {
  _call: UpdateScriptCall;

  constructor(call: UpdateScriptCall) {
    this._call = call;
  }

  get _scriptIndex(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _script(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class UpdateScriptCall__Outputs {
  _call: UpdateScriptCall;

  constructor(call: UpdateScriptCall) {
    this._call = call;
  }
}
