type Project @entity {
  id: ID!
  studioContract: StudioContract!
  traitsContract: TraitsContract!
  name: String!
  symbol: String!
  baseURI: String!
  artistAddress: String!
  maxSupply: BigInt!
  totalSupply: BigInt!
  metadata: String!
  script: String!
  traitTypes: [TraitType!]! @derivedFrom(field: "project")
  auctionStartPrice: BigInt!
  auctionEndPrice: BigInt!
  auctionStartTime: Int!
  auctionEndTime: Int!
}

type StudioContract @entity {
  id: ID!
  project: Project!
  traitsContract: TraitsContract!
}

type TraitsContract @entity {
  id: ID!
  project: Project!
  studioContract: StudioContract!
}

type Artwork @entity {
  id: ID! #StudioContractAddress-TokenID
  studioContract: StudioContract! #New
  tokenId: BigInt!
  hash: String!
  owner: User!
  creator: User!
  createdTimestamp: Int!
  decomposed: Boolean!
  traits: [Trait!]
}

type User @entity {
  id: ID!
  artworks: [Artwork!]! @derivedFrom(field: "owner")
  traitBalances: [TraitBalance!]! @derivedFrom(field: "owner")
}

type Trait @entity {
  id: ID! #TraitsContractAddress-TokenID
  traitsContract: TraitsContract! #New
  tokenId: BigInt!
  name: String!
  value: String!
  maxSupply: BigInt!
  totalSupply: BigInt!
  traitType: TraitType! #TraitsContractAddress-TraitTypeID
  traitBalances: [TraitBalance!]! @derivedFrom(field: "trait")
}

type TraitBalance @entity {
  id: ID! #TraitsContractAddress-TokenID-UserAddress
  trait: Trait!
  owner: User!
  amount: BigInt!
}

type TraitType @entity {
  id: ID! #TraitsContractAddress-TraitTypeID
  index: Int!
  traitsContract: String! #New
  project: Project!
  name: String!
  value: String!
  traits: [Trait!]! @derivedFrom(field: "traitType")
}
