type Project @entity {
  id: ID!
  name: String!
  symbol: String!
  baseURI: String
  artistAddress: String
  maxSupply: BigInt
  metadata: String
  traitTypes: [TraitType!]
  auctionStartPrice: BigInt
  auctionEndPrice: BigInt
  auctionStartTime: Int
  auctionEndTime: Int
}

type Artwork @entity {
  id: ID!
  tokenId: BigInt!
  owner: User!
  creator: User!
  decomposed: Boolean!
  traits: [Trait!]!
}

type User @entity {
  id: ID!
  artworks: [Artwork!]! @derivedFrom(field: "owner")
  traitBalances: [TraitBalance!]! @derivedFrom(field: "owner")
}

type Trait @entity {
  id: ID! #TraitsContractAddress-TokenID
  contract: String! #New
  tokenId: BigInt!
  name: String!
  value: String!
  maxSupply: BigInt!
  totalSupply: BigInt!
  traitType: TraitType! #TraitsContractAddress-TraitTypeID
  traitBalances: [TraitBalance!]! @derivedFrom(field: "trait")
}

type TraitBalance @entity {
  id: ID! #TraitsContractAddress-TokenID-UserAddress
  trait: Trait!
  owner: User!
  amount: BigInt!
}

type TraitType @entity {
  id: ID! #TraitsContractAddress-TraitTypeID
  contract: String! #New
  name: String!
  value: String!
  traits: [Trait!]! @derivedFrom(field: "traitType")
}
