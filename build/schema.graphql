type Project @entity {
  id: ID!
  artworkContract: ArtworkContract!
  traitsContract: TraitsContract!
  name: String!
  symbol: String!
  artistAddress: Bytes!
  totalSupply: BigInt!
  nextTokenId: BigInt!
  metadataJSON: String!
  script: String!
  traits: [Trait!]! @derivedFrom(field: "project")
  whitelistBalances: [WhitelistBalance!]! @derivedFrom(field: "project")
  auctionStartPrice: BigInt!
  auctionEndPrice: BigInt!
  auctionStartTime: Int!
  auctionEndTime: Int!
  auctionPriceSteps: Int!
  traitsSaleStartTime: Int!
  whitelistStartTime: Int!
  proofMinted: Boolean!
}

type ArtworkContract @entity {
  id: ID!
  project: Project!
  traitsContract: TraitsContract!
  artworks: [Artwork!]! @derivedFrom(field: "artworkContract")
  secondarySalesSplits: [SecondarySalesSplit!]! @derivedFrom(field: "artworkContract")
}

type TraitsContract @entity {
  id: ID!
  project: Project!
  artworkContract: ArtworkContract!
  primarySalesSplits: [PrimarySalesSplit!]! @derivedFrom(field: "traitsContract")
}

type Artwork @entity {
  id: ID! #ArtworkContractAddress-TokenID
  artworkContract: ArtworkContract!
  tokenId: BigInt!
  hash: String!
  owner: User!
  creator: User!
  createdTimestamp: Int!
  traitsReclaimed: Boolean!
  traits: [Trait!]
}

type User @entity {
  id: ID!
  artworks: [Artwork!]! @derivedFrom(field: "owner")
  traitBalances: [TraitBalance!]! @derivedFrom(field: "owner")
  whitelistBalances: [WhitelistBalance!]! @derivedFrom(field: "owner")
  primarySalesSplit: [PrimarySalesSplit!]! @derivedFrom(field: "payee")
  secondarySalesSplit: [SecondarySalesSplit!]! @derivedFrom(field: "payee")
}

type Trait @entity {
  id: ID! #TraitsContractAddress-TokenID
  project: Project!
  traitsContract: TraitsContract! #New
  tokenId: BigInt!
  name: String!
  value: String!
  maxSupply: BigInt!
  totalSupply: BigInt!
  traitBalances: [TraitBalance!]! @derivedFrom(field: "trait")
  typeIndex: BigInt!
  typeName: String!
  typeValue: String!
}

type TraitBalance @entity {
  id: ID! #TraitsContractAddress-TokenID-UserAddress
  trait: Trait!
  owner: User!
  amount: BigInt!
}

type WhitelistBalance @entity {
  id: ID! #TraitsContractAddress-UserAddress
  project: Project!
  owner: User!
  amount: BigInt! 
}

type PrimarySalesSplit @entity {
  id: ID! #TraitsContractAddress-UserAddress
  traitsContract: TraitsContract!
  payee: User!
  shares: BigInt!
}

type SecondarySalesSplit @entity {
  id: ID! #ArtworkContractAddress-UserAddress
  artworkContract: ArtworkContract!
  payee: User!
  shares: BigInt!
}
